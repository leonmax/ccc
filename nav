local SlotManager = {}
SlotManager.__index = SlotManager

function SlotManager.new()
  local self = setmetatable({}, SlotManager)
  self.selectedSlot = 1
  return self
end

function SlotManager:select(s)
  if s == nil or s <= 0 or s > 16 then
    s = 1
  end
  turtle.select(s)
  self.selectedSlot = s
  print("selected slot "..s)
end

function SlotManager:getSelected()
  if self.selectedSlot == nil or self.selectedSlot < 1 or self.selectedSlot >= 16 then
    self.selectedSlot = 1
  end
  return self.selectedSlot
end

function SlotManager:reloadSlot(slot)
  local origin = self:getSelected()
  print("reload slot original selected slot "..origin)
  if slot == nil or slot <= 0 or slot > 16 then
    slot = origin
  end
  local result = false
  for from=1,16 do
    if from ~= slot then
        turtle.select(from)
      if (turtle.getItemCount(slot) == 0 or turtle.compareTo(slot)) and
         turtle.getItemCount(from) > 0 then
        print("transfer from slot "..from.." to "..slot)
        turtle.transferTo(slot)
        turtle.select(slot)
        result = true
        break
      end
    end
  end
  turtle.select(origin)
  return result
end

local slotmgr = SlotManager.new()

local Walker = {}
Walker.__index = Walker

function Walker.new()
  local self = setmetatable({}, Walker)
  return self
end

function Walker:beforeMove()
end

function Walker:afterMove()
end

walker = Walker.new()

local Placer = {}
Placer.__index = Placer

function Placer.new()
  local self = setmetatable({}, Placer)
  self.slotmgr = slotmgr
  return self
end

function Placer:placeDown()
  local success = turtle.placeDown(1)
  if success then
    print("placed a block below")
  end
  return success
end

function Placer:beforeMove()
end

function Placer:afterMove()
  if not turtle.detectDown() then
    if not self:placeDown() then
      if self.slotmgr:reloadSlot() then
        self:placeDown()
      end
    end
  end
end

placer = Placer.new()

local NORTH = vector.new( 0,  1,  0)
local EAST  = vector.new( 1,  0,  0)
local SOUTH = vector.new( 0, -1,  0)
local WEST  = vector.new(-1,  0,  0)
local UP    = vector.new( 0,  0,  1)
local DOWN  = vector.new( 0,  0, -1)

Agent = {}
Agent.__index = Agent

function Agent.new()
  local self = setmetatable({}, Agent)
  self.startPos = self:locate()
  print("I'm at: ("..self.pos:tostring().."), remain fuel: "..self:checkfuel())

  self.orient = NORTH
  self.startOrient = NORTH
  self.actor = walker
  return self
end

function Agent:with(actor)
  self.actor = actor
  return self
end

function Agent:checkfuel()
  fuel = turtle.getFuelLevel()
  if fuel == 0 then
    print("I'm EXHAUSTED! Feed me!")
    return 0
  else
    print("remain fuel "..fuel)
    return fuel
  end
end

function Agent:locate(coordinate)
  self.pos = self:loadCoordinate()
  if self.pos == nil then
    print("Load coordinate from history: ("..self.pos:tostring()..")")
    return self.pos
  end

  --local x, y, z = gps.locate(5)
  if x ~= nil then
    self.pos = vector.new(x, y, z)
  elseif coordinate ~= nil and coordinate.x ~= nil then
    self.pos = coordinate
    print("Manually input coordinate: ("..self.pos:tostring()..")")
    self:saveCoordinate(self.pos)
  elseif self.pos == nil or self.pos.x == nil then
    self.pos = vector.new()
    print("Totally lost, assume at: ("..self.pos:tostring()..")")
  end
  return self.pos
end

function Agent:close()
  self:saveCoordinate()
end

function Agent:loadCoordinate()
  local handle = fs.open("state/coordinate", "r")
  self.pos = textutils.unserialize(handle.readLine())
  self.orient = textutils.unserialize(handle.readLine())
  -- self.pos = vector.new(t[1], t[2], t[3])
  return self.pos
end

function Agent:saveCoordinate()
  local handle = fs.open("state/coordinate", "w")
  textutils.serialize(handle.writeLine(self.pos))
  textutils.serialize(handle.writeLine(self.orient))
end

function Agent:relative(coordinate)
  if coordinate == nil or coordinate.x == nil then
    coordinate = self.startPos
  end
  return self:locate() - coordinate
end

function Agent:beforeEachMove()
  self.actor:beforeMove()
end

function Agent:afterEachMove()
  self.actor:afterMove()
end

function Agent:move(distance, dir)
  if distance == nil then distance = 1 end
  if dir == nil then dir = self.orient end
  local original = self.pos

  if distance < 0 then dir = -dir end
  -- move distance
  for i=1, math.abs(distance) do
    self:beforeEachMove()

    -- move 1 block
    local success = nil
    if dir == UP then
      success = turtle.up()
    elseif dir == DOWN then
      success = turtle.down()
    elseif dir == self.orient then
      success = turtle.forward()
    elseif dir == -self.orient then
      dir = -self.orient
      success = turtle.back()
    end

    -- stop if cannot move
    if success then break end
    local result = self:afterEachMove()
    self.pos = self.pos + dir
  end
  -- after all move
  local moved = original - self.pos
  if moved:length() ~= 0 then
    print("move "..moved:length().." blocks")
    self:saveCoordinate()
  end
  return moved
end

function Agent:forward(distance)
  return self:move(distance, self.orient)
end

function Agent:back(distance)
  return self:move(distance, -self.orient)
end

function Agent:up(distance)
  return self:move(distance, UP)
end

function Agent:down(distance)
  return self:move(distance, DOWN)
end

function Agent:left(distance)
  self:turnLeft()
  local result = self:move(distance, self.orient)
  self:turnRight()
  return result
end

function Agent:right(step)
  self:turnRight()
  local result = self:move(distance, self.orient)
  self:turnLeft()
  return result
end

function orientName(orient)
  if orient == NORTH then
    return "NORTH"
  elseif orient == SOUTH then
    return "SOUTH"
  elseif orient == EAST then
    return "EAST"
  elseif orient == WEST then
    return "WEST"
  end
end

function Agent:turnRight()
  if self.orient == NORTH then
    self.orient = EAST
  elseif self.orient == EAST then
    self.orient = SOUTH
  elseif self.orient == SOUTH then
    self.orient = WEST
  elseif self.orient == WEST then
    self.orient = NORTH
  end
  print(self:orientName(self.orient))
  turtle.turnRight()
end

function Agent:turnLeft()
  if self.orient == NORTH then
    self.orient = WEST
  elseif self.orient == WEST then
    self.orient = SOUTH
  elseif self.orient == SOUTH then
    self.orient = EAST
  elseif self.orient == EAST then
    self.orient = NORTH
  end
  print(self:orientName(self.orient))
  turtle.turnLeft()
end

function Agent:turnAround(step)
  self:turnLeft()
  self:turnLeft()
end

function Agent:cover(x, y, z)
  pos = vector.new()
  print("covering "..x.." X "..y)
  for height=1, z do
    for row=0,x,2 do
      pos = pos + self:forward(y)
      self:turnRight()
      if x - row >= 1 then
        pos = pos + self:forward(1)
      end
      self:turnRight()

      pos = pos + self:forward(y)
      self:turnLeft()
      if x - row >= 2 then
        pos = pos + self:forward(1)
      end
      self:turnLeft()
    end
    pos = pos + self:to(-x,0,0)
    pos = pos + self:up(1)
  end
  return pos
end

function Agent:wall(x, y, z)
  pos = vector.new()
  for height=1, z do
    pos = pos + self:up(1) + self:to(x, y, 0) + self:to(-x, -y, 0)
  end
  return pos
  --self:to(vector.new(0, 0, 0))
end

function Agent:to(x, y, z)
  pos = vector.new()
  if x ~= 0 then
    pos = pos + self:right(x)
  end
  pos = pos + self:move(y) + self:move(z, true)
  return pos
end

function Agent:callby(name, ...)
  pos = Agent[name](self, ...)
  print("I'm at: ("..pos:tostring()..") orient: ("..self:orientName(self.orient)..")")
  print("I'm at: ("..self:locate():tostring()..")")
end

agent = Agent.new(walker)
