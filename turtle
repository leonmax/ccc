write('Host ID: ')
sender = read()
--ask for host id

Client = {}
Client.__index = Client

function Client.new(host)
  local self = setmetatable({}, Navigator)
  self.RUN=true
  self.host = host
  print("connecting to host "..host)
  shell.run('clear') --clear the screen
end

function Client:close()
  self.RUN=false
  rednet.close("right")
end

function Client:start()
  rednet.open("right") --open the wifi port
  self.RUN = true
  while self.RUN do
    senderID, event, protocol = rednet.receive() --wait for input
    if senderID = self.host then
      if event == "shutdown" then
        print("disconnect")
        self:close()
      else
        self:handle(event, senderId)
      end
    end
  end
end

function Client:handle(event, senderId, protocol)
  while SHUTDOWN == 1 do --start loop
    action, senderID, text = os.pullEvent() --wait for input
    if event == "rednet_message" then --if its a wireless message do
      if text == 'forward' then -- if the up button is pressed
        turtle.forward() -- go forward
      end
      if text == 'backward' then --you know...
        turtle.back()
      end
      if text == 'left' then
        turtle.turnLeft()
      end
      if text == 'right' then
        turtle.turnRight()
      end
      if text == 'up' then
        if turtle.detectUp() then
          turtle.digUp()
        else
          turtle.up()
        end
      end
      if text == 'down' then
        if turtle.detectDown() then
          turtle.digDown()
        else
          turtle.down()
        end
      end

      if text == 'dig' then -- if the space button is pressed on dig mode
        turtle.dig() -- dig forward
      end
      if text == 'place' then -- if the space button is pressed on place mode
        turtle.place() --place the selected block in front
      end
      if text == 'rs' then -- if the ctrl button is pressed
        redstone.setOutput('front', true) -- set redstone in front to true
      end
    end
    -- if action=="key" and senderID == self.host then -- check sender id
    --   self.RUN=false
    -- end
  end
end

function Client:turtle(event)
end
